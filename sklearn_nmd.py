# -*- coding: utf-8 -*-
"""sklearn nmd

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Y-nimf2hm6WO9--ng-KcWX5kXC3FP8if
"""

import numpy as np
from sklearn import datasets, linear_model
from sklearn.metrics import mean_squared_error, r2_score
import pandas as pd
import io
from sklearn import preprocessing
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split

# get data
judge_data = pd.read_csv('judge.csv')
judge_features = ['description','release_speed','release_pos_x','release_pos_z','zone','vx0','vy0','vz0','ax','ay','az','effective_speed','release_pos_y']
df = judge_data[judge_features].dropna(axis=0)

# normalize values
for c in df.columns:
  if (c != 'description'):
    df.loc[:,c] = df.loc[:,c]/df.loc[:,c].abs().max()

# split data
trainingSet, testSet = train_test_split(df, test_size=0.2)
dfTrain = trainingSet
dfTest = testSet

# separate input from output
train_data = dfTrain[['release_speed','release_pos_x','release_pos_z','zone','vx0','vy0','vz0','ax','ay','az','effective_speed','release_pos_y']]

yTrainMatrix = dfTrain['description']

test_data = dfTest[['release_speed','release_pos_x','release_pos_z','zone','vx0','vy0','vz0','ax','ay','az','effective_speed','release_pos_y']]

yTestMatrix = dfTest['description']

# scale and fit data
logreg = LogisticRegression(max_iter = 1500)
scaler = preprocessing.StandardScaler().fit(train_data)

X_scaled = scaler.transform(train_data)
ys = []
for i in yTrainMatrix:
  ys.append(i)

logreg.fit(X_scaled,ys)
h = logreg.predict(test_data) # predict outcomes

a = 0
for i in range(len(h)):
  if ys[i] == h[i]:
    a += 1
print(a / len(ys)) # accuracy